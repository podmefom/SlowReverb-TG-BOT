import logging
import os
import tempfile
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)

from bot.audio_processor import AudioProcessor
from bot.database import DatabaseManager
from pydub import AudioSegment
import sqlite3

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
UPLOAD, SET_SPEED, SET_REVERB, SET_BASS, CONFIRM = range(5)

class MusicBot:
    def __init__(self):
        self.token = ('BOT_TOKEN')
        self.db = DatabaseManager()
        self.audio_processor = AudioProcessor()

    async def start(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            'üéß –û—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3/WAV/OGG)',
            reply_markup=InlineKeyboardMarkup([])
        )
        return UPLOAD

    async def _handle_audio(self, update: Update, context: CallbackContext) -> int:
        try:
            audio_file = update.message.audio
            logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {audio_file.file_name}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            context.user_data['original_filename'] = audio_file.file_name
            logger.debug("–ò–º—è —Ñ–∞–π–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            if audio_file.file_size > 50 * 1024 * 1024:
                logger.warning("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
                await update.message.reply_text("‚ùå –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50 –ú–ë")
                return ConversationHandler.END

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as tmp:
                input_path = tmp.name
                logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {input_path}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                file = await audio_file.get_file()
                await file.download_to_drive(input_path)
                logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω")

            context.user_data['input_path'] = input_path
            logger.debug("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–∫–æ—Ä–æ—Å—Ç–∏")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            await update.message.reply_text(
                "üê¢ **–®–∞–≥ 1/3: –£–∫–∞–∂–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å (0.1-2.0):**\n"
                "–ü—Ä–∏–º–µ—Ä: 0.7 ‚Äî —É–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ",
                parse_mode="Markdown"
            )
            return SET_SPEED

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
            await update.message.reply_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞")
            return ConversationHandler.END

    async def _set_speed(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        try:
            speed = float(update.message.text)
            if not 0.1 <= speed <= 2.0:
                raise ValueError
            
            context.user_data['speed'] = speed
            await update.message.reply_text(
                "üèîÔ∏è **–®–∞–≥ 2/3: –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏ (–∑–∞–¥–µ—Ä–∂–∫–∞ –∏ —É—Ä–æ–≤–µ–Ω—å):**\n"
                "–ü—Ä–∏–º–µ—Ä: 150 0.5 ‚Äî —Å—Ä–µ–¥–Ω–µ–µ —ç—Ö–æ",
                parse_mode="Markdown"
            )
            return SET_REVERB

        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.1 –¥–æ 2.0.\n"
                "–ü—Ä–∏–º–µ—Ä: 0.7"
            )
            return SET_SPEED

    async def _set_reverb(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏"""
        try:
            delay, decay = map(float, update.message.text.split())
            if not (10 <= delay <= 1000) or not (0 <= decay <= 1):
                raise ValueError
            
            context.user_data['reverb'] = (int(delay), decay)
            await update.message.reply_text(
                "üîä **–®–∞–≥ 3/3: –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –±–∞—Å–æ–≤ (-20 –¥–æ +20):**\n"
                "–ü—Ä–∏–º–µ—Ä: -5 ‚Äî —É–º–µ–Ω—å—à–∏—Ç—å –±–∞—Å—ã",
                parse_mode="Markdown"
            )
            return SET_BASS

        except:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <–∑–∞–¥–µ—Ä–∂–∫–∞> <—É—Ä–æ–≤–µ–Ω—å>\n"
                "–ü—Ä–∏–º–µ—Ä: 200 0.5"
            )
            return SET_REVERB

    async def _set_bass(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –±–∞—Å–æ–≤"""
        try:
            bass = float(update.message.text)
            if not -20 <= bass <= 20:
                raise ValueError
            
            context.user_data['bass'] = bass
            await update.message.reply_text(
                "‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –û—Ç–ø—Ä–∞–≤—å—Ç–µ /process –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
            )
            return CONFIRM

        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç -20 –¥–æ 20.\n"
                "–ü—Ä–∏–º–µ—Ä: -5"
            )
            return SET_BASS

    async def _process_audio(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ç—Ä–µ–∫–∞"""
        try:
            user_data = context.user_data
            original_filename = user_data.get('original_filename', '–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫')
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
            audio = AudioSegment.from_file(user_data['input_path'])
            audio = self.audio_processor.apply_slow(audio, user_data['speed'])
            audio = self.audio_processor.apply_reverb(audio, *user_data['reverb'])
            audio = self.audio_processor.adjust_bass(audio, user_data['bass'])
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as tmp:
                output_path = tmp.name
                audio.export(output_path, format="ogg", bitrate="192k")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ
            with open(output_path, 'rb') as audio_file:
                msg = await update.message.reply_audio(
                    audio=audio_file,
                    title=original_filename,
                    performer="–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–æ—Ç–æ–º",
                    duration=int(len(audio) / 1000)
                )
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                track_id = self.db.add_track(update.effective_user.id, msg.audio.file_id)
                await update.message.reply_text(
                    '‚úÖ –¢—Ä–µ–∫ –≥–æ—Ç–æ–≤!\n\n –ü–∏—à–∏ /start, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω!',
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", exc_info=True)
            await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ')
        
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if 'input_path' in user_data:
                try:
                    os.remove(user_data['input_path'])
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            if 'output_path' in locals():
                try:
                    os.remove(output_path)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            context.user_data.clear()
        
        return ConversationHandler.END

    async def _handle_like(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        track_id = int(query.data.split('_')[1])
        
        if self.db.like_track(user_id, track_id):
            likes = self.db.get_track_likes(track_id)
        else:
            await query.answer("–í—ã —É–∂–µ –ª–∞–π–∫–∞–ª–∏ —ç—Ç–æ—Ç —Ç—Ä–µ–∫!")
    
    async def show_top(self, update: Update, context: CallbackContext):
        conn = sqlite3.connect('tracks.db')
        c = conn.cursor()
        
        try:
            c.execute('SELECT id, file_id, likes FROM tracks ORDER BY likes DESC LIMIT 10')
            tracks = c.fetchall()
            
            if not tracks:
                await update.message.reply_text('üòî –í —Ç–æ–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!')
                return
                
            await update.message.reply_text('üèÜ –¢–æ–ø 10 —Ç—Ä–µ–∫–æ–≤:')
            
            for idx, (track_id, file_id, likes) in enumerate(tracks, 1):
                try:
                    await context.bot.send_audio(
                        chat_id=update.effective_chat.id,
                        audio=file_id,
                        caption=f"#{idx} üéµ –õ–∞–π–∫–æ–≤: {likes}",
                        reply_markup=self._get_track_keyboard(track_id, likes)
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞ {track_id}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–æ–ø–∞: {e}")
            await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ø')
        finally:
            conn.close()

    def run(self):
        app = ApplicationBuilder().token(self.token).build()

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                UPLOAD: [MessageHandler(filters.AUDIO, self._handle_audio)],
                SET_SPEED: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._set_speed)],  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                SET_REVERB: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._set_reverb)],  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                SET_BASS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._set_bass)],  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                CONFIRM: [CommandHandler('process', self._process_audio)]  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            },
            fallbacks=[CommandHandler('cancel', lambda u,c: ConversationHandler.END)],
        )

        app.add_handler(conv_handler)
        app.add_handler(CallbackQueryHandler(self._handle_like, pattern='^like_'))
        app.add_handler(CommandHandler('top', self.show_top))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        app.run_polling()

if __name__ == '__main__':
    MusicBot().run()
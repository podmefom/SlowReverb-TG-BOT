import logging
from pydub import AudioSegment
from pydub.effects import low_pass_filter
from telegram import Update, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)
import os
import tempfile
import sqlite3
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('tracks.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS tracks 
                 (id INTEGER PRIMARY KEY, 
                  user_id INTEGER, 
                  file_id TEXT, 
                  likes INTEGER DEFAULT 0, 
                  created_at TEXT)''')  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ç–∏–ø –¥–∞—Ç—ã
    c.execute('''CREATE TABLE IF NOT EXISTS likes 
                 (user_id INTEGER, 
                  track_id INTEGER,
                  UNIQUE(user_id, track_id))''')
    conn.commit()
    conn.close()

init_db()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

UPLOAD, SET_SPEED, SET_REVERB, SET_BASS, CONFIRM = range(5)

def get_track_keyboard(track_id, likes=0):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"‚ù§Ô∏è {likes}", callback_data=f"like_{track_id}")],
        [InlineKeyboardButton("–¢–æ–ø —Ç—Ä–µ–∫–æ–≤", callback_data="top")]
    ])

async def start(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        'üéß –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n'
        '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP3, WAV, OGG',
        reply_markup=ReplyKeyboardRemove()
    )
    return UPLOAD

async def handle_audio(update: Update, context: CallbackContext) -> int:
    try:
        audio_file = update.message.audio
        context.user_data['original_filename'] = audio_file.file_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as tmp:
            input_path = tmp.name
            file = await audio_file.get_file()
            await file.download_to_drive(input_path)
        
        context.user_data['input_path'] = input_path
        
        await update.message.reply_text(
            'üéõÔ∏è <b>–°–µ–π—á–∞—Å –Ω–∞—Å—Ç—Ä–æ–∏–º –∑–≤—É–∫! –í–æ—Ç —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n\n'
            '1. –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ/—É—Å–∫–æ—Ä–µ–Ω–∏–µ\n'
            '2. –≠—Ñ—Ñ–µ–∫—Ç —ç—Ö–∞\n'
            '3. –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –±–∞—Å–æ–≤\n\n'
            '–ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ —è –±—É–¥—É –æ–±—ä—è—Å–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. '
            '–ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã!',
            parse_mode='HTML'
        )
        return await set_speed(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞')
        return ConversationHandler.END

# ... (—Ñ—É–Ω–∫—Ü–∏–∏ set_speed, set_reverb, set_bass –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

async def process_audio(update: Update, context: CallbackContext) -> int:
    try:
        user_data = context.user_data
        original_filename = user_data.get('original_filename', '–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫')
        
        audio = AudioSegment.from_file(user_data['input_path'])
        audio = apply_slow(audio, user_data['speed'])
        audio = apply_reverb(audio, *user_data['reverb'])
        audio = adjust_bass(audio, user_data['bass'])
        
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as tmp:
            output_path = tmp.name
            audio.export(output_path, format="ogg", bitrate="192k")
        
        with open(output_path, 'rb') as audio_file:
            msg = await update.message.reply_audio(
                audio=audio_file,
                title=original_filename,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
                performer="–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–æ—Ç–æ–º",
                duration=int(len(audio)/1000)
            )
            
            conn = sqlite3.connect('tracks.db')
            c = conn.cursor()
            c.execute('''INSERT INTO tracks 
                      (user_id, file_id, created_at) 
                      VALUES (?, ?, ?)''',
                      (update.effective_user.id, 
                       msg.audio.file_id, 
                       datetime.now().isoformat()))  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            track_id = c.lastrowid
            conn.commit()
            conn.close()

            await update.message.reply_text(
                '‚úÖ –ì–æ—Ç–æ–≤–æ! –¢—Ä–µ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.\n'
                '‚ù§Ô∏è –õ–∞–π–∫–∞–π—Ç–µ —Ç—Ä–µ–∫–∏ –≤ /top',
                reply_markup=get_track_keyboard(track_id)
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ')

    finally:
        cleanup(user_data)
        context.user_data.clear()
    
    return ConversationHandler.END

async def handle_like(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    track_id = int(query.data.split('_')[1])
    
    conn = sqlite3.connect('tracks.db')
    c = conn.cursor()
    
    try:
        c.execute('INSERT INTO likes (user_id, track_id) VALUES (?, ?)', (user_id, track_id))
        c.execute('UPDATE tracks SET likes = likes + 1 WHERE id = ?', (track_id,))
        conn.commit()
        
        c.execute('SELECT likes FROM tracks WHERE id = ?', (track_id,))
        new_likes = c.fetchone()[0]
        
        await query.message.edit_reply_markup(
            reply_markup=get_track_keyboard(track_id, new_likes)
        )
        
    except sqlite3.IntegrityError:
        await query.answer('–í—ã —É–∂–µ –ª–∞–π–∫–∞–ª–∏ —ç—Ç–æ—Ç —Ç—Ä–µ–∫!')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–∞–π–∫–∞: {e}")
        await query.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞')
    finally:
        conn.close()

async def show_top(update: Update, context: CallbackContext):
    conn = sqlite3.connect('tracks.db')
    c = conn.cursor()
    
    try:
        c.execute('SELECT id, file_id, likes FROM tracks ORDER BY likes DESC LIMIT 10')
        tracks = c.fetchall()
        
        if not tracks:
            await update.message.reply_text('üòî –í —Ç–æ–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!')
            return
            
        await update.message.reply_text('üèÜ –¢–æ–ø 10 —Ç—Ä–µ–∫–æ–≤:')
        
        for idx, (track_id, file_id, likes) in enumerate(tracks, 1):
            try:
                await context.bot.send_audio(
                    chat_id=update.effective_chat.id,
                    audio=file_id,
                    caption=f"#{idx} üéµ –õ–∞–π–∫–æ–≤: {likes}",
                    reply_markup=get_track_keyboard(track_id, likes)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞ {track_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–æ–ø–∞: {e}")
        await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ø')
    finally:
        conn.close()

async def set_speed(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    if 'speed_guide_shown' not in context.user_data:
        await update.message.reply_text(
            'üê¢ <b>–®–∞–≥ 1/3: –°–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è</b>\n\n'
            '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:\n'
            '‚ñ´Ô∏è 0.5 ‚Äî –∑–∞–º–µ–¥–ª–∏—Ç—å –≤ 2 —Ä–∞–∑–∞\n'
            '‚ñ´Ô∏è 0.7 ‚Äî –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –º—É–∑—ã–∫–∏\n'
            '‚ñ´Ô∏è 1.0 ‚Äî –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n'
            '‚ñ´Ô∏è 1.3 ‚Äî —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–∞ 30%\n\n'
            '<i>–ü—Ä–∏–º–µ—Ä: 0.8</i>',
            parse_mode='HTML'
        )
        context.user_data['speed_guide_shown'] = True
        return SET_SPEED

    try:
        speed = float(update.message.text)
        if not 0.1 <= speed <= 2.0:
            raise ValueError
        
        context.user_data['speed'] = speed
        del context.user_data['speed_guide_shown']
        return await set_reverb(update, context)

    except:
        await update.message.reply_text(
            '‚ùå –ù–µ –ø–æ–Ω—è–ª. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ–∂–¥—É 0.1 –∏ 2.0.\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 0.7'
        )
        return SET_SPEED

async def set_reverb(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    if 'reverb_guide_shown' not in context.user_data:
        await update.message.reply_text(
            'üèîÔ∏è <b>–®–∞–≥ 2/3: –≠—Ñ—Ñ–µ–∫—Ç —ç—Ö–∞</b>\n\n'
            '–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n'
            '1. –ó–∞–¥–µ—Ä–∂–∫–∞ (–º—Å): 50-500\n'
            '2. –£—Ä–æ–≤–µ–Ω—å: 0.1-1.0\n\n'
            '<i>–ü—Ä–∏–º–µ—Ä—ã:\n'
            '‚Ä¢ 150 0.4 ‚Äî –ª–µ–≥–∫–æ–µ —ç—Ö–æ\n'
            '‚Ä¢ 300 0.7 ‚Äî —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—â–µ—Ä—ã</i>',
            parse_mode='HTML'
        )
        context.user_data['reverb_guide_shown'] = True
        return SET_REVERB

    try:
        delay, decay = map(float, update.message.text.split())
        if not (10 <= delay <= 1000) or not (0 <= decay <= 1):
            raise ValueError
        
        context.user_data['reverb'] = (int(delay), decay)
        del context.user_data['reverb_guide_shown']
        return await set_bass(update, context)

    except:
        await update.message.reply_text(
            '‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞! –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n'
            '–ü—Ä–∏–º–µ—Ä: 200 0.5'
        )
        return SET_REVERB

async def set_bass(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Å–æ–≤ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    if 'bass_guide_shown' not in context.user_data:
        await update.message.reply_text(
            'üîä <b>–®–∞–≥ 3/3: –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –±–∞—Å–æ–≤</b>\n\n'
            '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç -20 –¥–æ +20:\n'
            '‚ñ´Ô∏è -10 ‚Äî –º–∞–ª–æ –±–∞—Å–æ–≤\n'
            '‚ñ´Ô∏è 0 ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n'
            '‚ñ´Ô∏è +10 ‚Äî –º–æ—â–Ω—ã–µ –±–∞—Å—ã\n\n'
            '<i>–ü—Ä–∏–º–µ—Ä: -5</i>',
            parse_mode='HTML'
        )
        context.user_data['bass_guide_shown'] = True
        return SET_BASS

    try:
        bass = float(update.message.text)
        if not -20 <= bass <= 20:
            raise ValueError
        
        context.user_data['bass'] = bass
        del context.user_data['bass_guide_shown']
        await update.message.reply_text(
            '‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ /process —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É\n'
            'üîÑ /cancel ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'
        )
        return CONFIRM

    except:
        await update.message.reply_text(
            '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç -20 –¥–æ 20.\n'
            '–ü—Ä–∏–º–µ—Ä: -7'
        )
        return SET_BASS

async def process_audio(update: Update, context: CallbackContext) -> int:
    try:
        user_data = context.user_data
        audio = AudioSegment.from_file(user_data['input_path'])
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
        audio = apply_slow(audio, user_data['speed'])
        audio = apply_reverb(audio, *user_data['reverb'])
        audio = adjust_bass(audio, user_data['bass'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as tmp:
            output_path = tmp.name
            audio.export(output_path, format="ogg", bitrate="192k")
        
        await update.message.reply_audio(audio=output_path)
        await update.message.reply_text('‚úÖ –ì–æ—Ç–æ–≤–æ! –ù–æ–≤—ã–π —Ñ–∞–π–ª –≤—ã—à–µ\n\n/start –ù–æ–≤—ã–π —Ä–µ–º–∏–∫—Å–∏–∫ 0_o')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ')

    finally:
        cleanup(user_data)
        context.user_data.clear()
    
    return ConversationHandler.END

def apply_slow(audio: AudioSegment, speed: float) -> AudioSegment:
    return audio._spawn(
        audio.raw_data,
        overrides={"frame_rate": int(audio.frame_rate * speed)}
    ).set_frame_rate(audio.frame_rate)

def apply_reverb(audio: AudioSegment, delay: int, decay: float) -> AudioSegment:
    delayed = audio[-delay:].append(
        AudioSegment.silent(duration=delay),
        crossfade=0
    ).apply_gain(decay * 20)
    return audio.overlay(delayed, times=2, position=delay//2)

def adjust_bass(audio: AudioSegment, gain_db: float) -> AudioSegment:
    """–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∏–∑–∫–∏—Ö —á–∞—Å—Ç–æ—Ç —á–µ—Ä–µ–∑ low-pass —Ñ–∏–ª—å—Ç—Ä"""
    if gain_db < 0:
        # –£–º–µ–Ω—å—à–∞–µ–º –±–∞—Å—ã
        return low_pass_filter(audio, cutoff=200).apply_gain(gain_db)
    elif gain_db > 0:
        # –£—Å–∏–ª–∏–≤–∞–µ–º –±–∞—Å—ã
        return audio.low_pass_filter(150).apply_gain(gain_db) + audio
    return audio

def cleanup(user_data: dict):
    for path in [user_data.get('input_path')]:
        if path and os.path.exists(path):
            try: os.remove(path)
            except: pass

async def process_audio(update: Update, context: CallbackContext) -> int:
    try:
        user_data = context.user_data
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if 'input_path' not in user_data:
            await update.message.reply_text('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start')
            return ConversationHandler.END

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
        try:
            audio = AudioSegment.from_file(user_data['input_path'])
            audio = apply_slow(audio, user_data['speed'])
            audio = apply_reverb(audio, *user_data['reverb'])
            audio = adjust_bass(audio, user_data['bass'])
        except Exception as processing_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {processing_error}")
            await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ')
            return ConversationHandler.END

        # –≠–∫—Å–ø–æ—Ä—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        output_path = None
        try:
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as tmp:
                output_path = tmp.name
                audio.export(output_path, 
                           format="ogg",
                           bitrate="192k",
                           parameters=["-acodec", "libvorbis"])
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                file_size = os.path.getsize(output_path)
                if file_size > 50 * 1024 * 1024:
                    await update.message.reply_text('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50 –ú–ë)')
                    return
        except Exception as export_error:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_error}")
            await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞')
            return

        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
        try:
            with open(output_path, 'rb') as audio_file:
                msg = await update.message.reply_audio(
                    audio=audio_file,
                    title="–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫",
                    performer="AudioBot",
                    duration=int(len(audio)/1000),
                    parse_mode='HTML'
                )
                
                if not msg.audio:
                    raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Telegram API")
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                conn = sqlite3.connect('tracks.db')
                c = conn.cursor()
                c.execute('''INSERT INTO tracks 
                          (user_id, file_id, created_at) 
                          VALUES (?, ?, ?)''',
                        (update.effective_user.id, msg.audio.file_id, datetime.now()))
                track_id = c.lastrowid
                conn.commit()
                conn.close()

                await update.message.reply_text(
                    '‚úÖ –¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\n'
                    '‚ù§Ô∏è –õ–∞–π–∫–Ω–∏—Ç–µ –µ–≥–æ –≤ /top',
                    reply_markup=get_track_keyboard(track_id)
                )

        except Exception as send_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_error}")
            await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç.')

    except Exception as global_error:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {global_error}", exc_info=True)
        await update.message.reply_text('üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')

    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if 'input_path' in user_data:
            try:
                os.remove(user_data['input_path'])
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        
        if output_path and os.path.exists(output_path):
            try:
                os.remove(output_path)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        
        context.user_data.clear()
    
    return ConversationHandler.END

async def publish_track(update: Update, context: CallbackContext):
    # –õ–æ–≥–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç—Ä–µ–∫–∞
    pass

async def show_top(update: Update, context: CallbackContext):
    conn = sqlite3.connect('tracks.db')
    c = conn.cursor()
    c.execute('SELECT id, file_id, likes FROM tracks ORDER BY likes DESC LIMIT 10')
    tracks = c.fetchall()
    
    response = "üèÜ –¢–æ–ø —Ç—Ä–µ–∫–æ–≤:\n\n"
    for idx, (track_id, file_id, likes) in enumerate(tracks, 1):
        response += f"{idx}. –õ–∞–π–∫–æ–≤: {likes}\n"
        await context.bot.send_audio(
            chat_id=update.effective_chat.id,
            audio=file_id,
            reply_markup=get_track_keyboard(track_id)
        )
    
    conn.close()
    await update.message.reply_text(response)

async def handle_like(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    track_id = int(query.data.split('_')[1])
    
    conn = sqlite3.connect('tracks.db')
    c = conn.cursor()
    
    try:
        c.execute('INSERT INTO likes (user_id, track_id) VALUES (?, ?)', (user_id, track_id))
        c.execute('UPDATE tracks SET likes = likes + 1 WHERE id = ?', (track_id,))
        conn.commit()
        await query.answer('–í–∞—à –ª–∞–π–∫ —É—á—Ç–µ–Ω!')
    except sqlite3.IntegrityError:
        await query.answer('–í—ã —É–∂–µ –ª–∞–π–∫–∞–ª–∏ —ç—Ç–æ—Ç —Ç—Ä–µ–∫!')
    finally:
        conn.close()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await query.message.edit_reply_markup(reply_markup=get_track_keyboard(track_id))

def main():
    token = 'bot_token'
    application = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            UPLOAD: [MessageHandler(filters.AUDIO, handle_audio)],
            SET_SPEED: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_speed)],
            SET_REVERB: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_reverb)],
            SET_BASS: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_bass)],
            CONFIRM: [CommandHandler('process', process_audio)]
        },
        fallbacks=[CommandHandler('cancel', lambda u,c: ConversationHandler.END)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('top', show_top))
    application.add_handler(CallbackQueryHandler(handle_like, pattern='^like_'))
    
    application.run_polling()

if __name__ == '__main__':
    main()